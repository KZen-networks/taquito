#!/usr/bin/env node

const rp = require('request-promise');
const program = require('commander');
const fs = require('fs');
const path = require('path');
const low = require('lowdb');
const FileSync = require('lowdb/adapters/FileSync');

const sodium = require('libsodium-wrappers');
const { Tezos } = require('../packages/taquito/dist/lib/taquito');
const { TwoPartySigner, EcdsaParty2Share } = require('../packages/taquito-signer/dist/lib/two-party-signer');
const { IndexerClient } = require('../packages/taquito-indexer/dist/lib/taquito-indexer');
const {StreamerProvider} = require('../packages/taquito-streamer/dist/lib/taquito-streamer');
const { prefix, b58cencode, b58decode } = require('../packages/taquito-utils/dist/lib/taquito-utils');

const CLIENT_DB_PATH = path.join(__dirname, 'client-db');
const indexerUrl = {
  babylonnet: 'https://api.tez.ie/indexer/babylonnet',
  mainnet: 'https://api.tez.ie/indexer/mainnet'
};
const explorerApiUrl = {
  babylonnet: 'https://api.babylonnet.tzstats.com',
  mainnet: 'https://api.tzstats.com'
};
const rpcUrl = {
  babylonnet: 'https://rpcalpha.tzbeta.net/',
  mainnet: 'https://mainnet.tezrpc.me'
};

function ensureDirSync(dirpath) {
  try {
    fs.mkdirSync(dirpath, { recursive: true });
  } catch (err) {
    if (err.code !== 'EEXIST') throw err;
  }
}

function logOp(op) {
  console.log(`hash = ${op.hash}`);
  console.log(`gas_limit = ${op.results[0].gas_limit}`);
  console.log(`fee = ${Tezos.format('mutez', 'tz', op.results[0].fee)} XTZ`);
  console.log(`amount = ${Tezos.format('mutez', 'tz', op.params.amount)} XTZ`);
  console.log(`source = ${op.results[0].source}`);
  console.log(`destination = ${op.params.destination}`);
  console.log(`metadata = ${JSON.stringify(op.results[0].metadata)}`);
}

ensureDirSync(CLIENT_DB_PATH);
const adapter = new FileSync(path.join(CLIENT_DB_PATH, 'db.json'));
const db = low(adapter);
db.defaults({ addresses: [] }).write();

program
  .command('address')
  .option('-n, --network [name]', 'Name of network ("babylonnet" or "mainnet")')
  .action(async (options) => {
    Tezos.setProvider({
      signer: new TwoPartySigner(),
      rpc: rpcUrl[options.network || 'babylonnet']
    });
    const address = await Tezos.signer.publicKeyHash();
    const share = JSON.parse(await Tezos.signer.secretKey());
    console.log(address);
    db.get('addresses').push({ address, share }).write();
  });

program
  .command('balance <address>')
  .option('-n, --network [name]', 'Name of network ("babylonnet" or "mainnet")')
  .action(async (address, options) => {
    Tezos.setProvider({
      rpc: rpcUrl[options.network || 'babylonnet']
    });
    let balanceInMutez;
    try {
      balanceInMutez = await Tezos.tz.getBalance(address);
    } catch (err) {
      console.error('err =', err);
    }
    const balanceInXtz = Tezos.format('mutez', 'tz', balanceInMutez);
    console.log(`${balanceInXtz} XTZ`);
  });

program
  .command('transfer <from> <to> <xtz_amount>')
  .option('-n, --network [name]', 'Name of network ("babylonnet" or "mainnet")')
  .action(async (from, to, xtz_amount, options) => {
    const { share } = db.get('addresses').find({address: from}).value();
    Tezos.setProvider({
      signer: new TwoPartySigner({party2Share: EcdsaParty2Share.fromPlain(share)}),
      rpc: rpcUrl[options.network || 'babylonnet']
    });
    const op = await Tezos.contract.transfer({ to, amount: xtz_amount});
    logOp(op);

    const id = await op.confirmation();
    console.log('id =', id);
  });

program
  .command('history <address>')
  .option('-n, --network <name>', 'Name of network ("babylonnet" (default) or "mainnet")')
  .option('-t, --type <name>', 'Type of operations to filter by ("transaction" | "reveal" | "origination")')
  .option('-l, --limit <number>', 'Number of operations to show (default 20)')
  .option('-o, --offset <number>', 'Offset for an operations page (default 0)')
  .option('-r, --order <direction>', 'Order of operations ("asc" (default) | "desc")')
  .option('-s, --since <number>', 'List all operations since given block number')
  .option('-b, --block <number>', 'List all operations only within a given block number')
  .action(async (address, options) => {
    function calcQueryString() {
      const optionNames = ['type', 'limit', 'offset', 'order', 'since', 'block'];
      return optionNames.reduce((prev, curr) => {
        const currentPair = options[curr] ? `${curr}=${options[curr]}` : '';
        const currDelimiter = currentPair ? (prev ? `&` : `?`) : '';
        return `${prev}${currDelimiter}${currentPair}`;
      }, '');
    }

    try {
      const network = options.network || 'babylonnet';
      const qs = calcQueryString();
      const response = await rp({
        method: 'GET',
        uri: `${explorerApiUrl[network]}/explorer/account/${address}/op${qs}`,
        json: true
      });
      console.log(response);
    } catch (err) {
      console.error('err =', err);
    }
  });

program
  .command('originate <address> <xtz_amount>')
  .option('-n, --network [name]', 'Name of network ("babylonnet" or "mainnet")')
  .action(async (address, amount, options) => {
    const { share } = db.get('addresses').find({address}).value();
    Tezos.setProvider({
      signer: new TwoPartySigner({party2Share: EcdsaParty2Share.fromPlain(share)}),
      rpc: rpcUrl[options.network || 'babylonnet']
    });
    try {
      const op = await Tezos.contract.originate({
        code: `parameter string;
        storage string;
        code {CAR;
              PUSH string "Hello ";
              CONCAT;
              NIL operation; PAIR};
        `,
        balance: amount,
        spendable: true,
        delegatable: true,
        delegate: null,
        init: `"test"`
      });
      logOp(op);
      const id = await op.confirmation();
      console.log('id =', id);
    } catch (err) {
      console.error('err =', err);
    }
  });

program
  .command('delegate <manager> <from> <to>')
  .option('-n, --network [name]', 'Name of network ("babylonnet" or "mainnet")')
  .action(async (manager, from, to, options) => {
    const { share } = db.get('addresses').find({address: manager}).value();
    Tezos.setProvider({
      signer: new TwoPartySigner({party2Share: EcdsaParty2Share.fromPlain(share)}),
      rpc: rpcUrl[options.network || 'babylonnet']
    });
    try {
      /* 'setDelegate' instead of 'registerDelegate' because the former allows custom source and delegate.
         'registerDelegate' takes the source and delegate as the signer's address ("manager" param here). */
      const op = await Tezos.contract.setDelegate({
        source: from,
        delegate: to
      });
      logOp(op);
      const id = await op.confirmation();
      console.log('id =', id);
    } catch (err) {
      console.error('err =', err);
    }
  });

program.parse(process.argv);
